set warnings off
set verbose off
clear

include "./src/assertion.inp" --force

# external packages needed
include string_utils.gfn 		# must be installed
include extra.gfn		 		# must be installed

nulldata 4 -p

print "Start with assert_is_type() + empty bundle"
bundle b = null						# empty bundle case
if ok(assert_is_type(b, "scalar")) != 0
    stop
endif

print "Start with assert_is_type()"
scalar scalar_1 = 4.3
scalar scalar_2 = NA
matrix mat_1 = {}
matrix mat_2 = ones(1,1)
matrix mat_3 = mnormal(2,2) * NA
matrix mat_4 = mnormal(2,2)
string str_1 = "ABC FT"
string str_2 = ""
string str_3 = "  "
string str_4 = " &/()=/&%#*g7z89--.."
bundle b_1 = defbundle("scalar_1", scalar_1, "str_1", str_1)
bundle b_2 = defbundle("mat_1", mat_1, "str_1", str_1)
series ser_1 = normal()
series ser_2 = NA
list L_1 = ser_1
list L_2 = ser_1 ser_2
matrices mats_1 = defarray(mat_1, mat_2)
matrices mats_2 = defarray(mat_2)
strings strarr_1 = array(0)
strings strarr_2 = defarray(str_1, str_2, str_3, str_4)


print "assert_is_type() for positive cases"
if assert_is_type(defbundle("foo", scalar_1), "scalar") != 1
    stop
endif
if assert_is_type(defbundle("foo", scalar_2), "scalar") != 1
    stop
endif

if assert_is_type(defbundle("foo", mat_1), "matrix") != 1
    stop
endif
if assert_is_type(defbundle("foo", mat_2), "matrix") != 1
    stop
endif
if assert_is_type(defbundle("foo", mat_3), "matrix") != 1
    stop
endif
if assert_is_type(defbundle("foo", mat_4), "matrix") != 1
    stop
endif

if assert_is_type(defbundle("foo", str_1), "string") != 1
    stop
endif
if assert_is_type(defbundle("foo", str_2), "string") != 1
    stop
endif
if assert_is_type(defbundle("foo", str_3), "string") != 1
    stop
endif
if assert_is_type(defbundle("foo", str_4), "string") != 1
    stop
endif

if assert_is_type(defbundle("foo", b_1), "bundle") != 1
    stop
endif
if assert_is_type(defbundle("foo", b_2), "bundle") != 1
    stop
endif

if assert_is_type(defbundle("foo", ser_1), "series") != 1
    stop
endif
if assert_is_type(defbundle("foo", ser_2), "series") != 1
    stop
endif

if assert_is_type(defbundle("foo", L_1), "list") != 1
    stop
endif
if assert_is_type(defbundle("foo", L_2), "list") != 1
    stop
endif

if assert_is_type(defbundle("foo", mats_1), "array") != 1
    stop
endif
if assert_is_type(defbundle("foo", mats_2), "array") != 1
    stop
endif
if assert_is_type(defbundle("foo", strarr_1), "array") != 1
    stop
endif
if assert_is_type(defbundle("foo", strarr_2), "array") != 1
    stop
endif


print "assert_is_type() for negative cases"
if assert_is_type(defbundle("foo", scalar_1), "series") != 0
    stop
endif
if assert_is_type(defbundle("foo", scalar_2), "matrix") != 1
    stop
endif

if assert_is_type(defbundle("foo", mat_1), "scalar") != 0
    stop
endif
if assert_is_type(defbundle("foo", mat_2), "string") != 0
    stop
endif
if assert_is_type(defbundle("foo", mat_3), "list") != 0
    stop
endif
if assert_is_type(defbundle("foo", mat_4), "array") != 0
    stop
endif

if assert_is_type(defbundle("foo", str_1), "matrix") != 0
    stop
endif
if assert_is_type(defbundle("foo", str_2), "series") != 0
    stop
endif
if assert_is_type(defbundle("foo", str_3), "list") != 0
    stop
endif
if assert_is_type(defbundle("foo", str_4), "array") != 0
    stop
endif

if assert_is_type(defbundle("foo", b_1), "array") != 0
    stop
endif
if assert_is_type(defbundle("foo", b_2), "scalar") != 0
    stop
endif

if assert_is_type(defbundle("foo", ser_1), "matrix") != 0
    stop
endif
if assert_is_type(defbundle("foo", ser_2), "array") != 0
    stop
endif

if assert_is_type(defbundle("foo", L_1), "series") != 0
    stop
endif
if assert_is_type(defbundle("foo", L_2), "array") != 0
    stop
endif

if assert_is_type(defbundle("foo", mats_1), "scalar") != 0
    stop
endif
if assert_is_type(defbundle("foo", mats_2), "series") != 0
    stop
endif
if assert_is_type(defbundle("foo", strarr_1), "list") != 0
    stop
endif
if assert_is_type(defbundle("foo", strarr_2), "string") != 0
    stop
endif


print "assert_is_not_type()"
if assert_is_not_type(defbundle("foo", scalar_1), "scalar") != 0
    stop
endif
if assert_is_not_type(defbundle("foo", scalar_2), "matrix") != 0
    # scalar treated like matrix
    stop
endif
if assert_is_not_type(defbundle("foo", mat_1), "matrix") != 0
    stop
endif
if assert_is_not_type(defbundle("foo", mat_2), "matrix") != 0
    stop
endif
if assert_is_not_type(defbundle("foo", mat_3), "list") != 1
    stop
endif
if assert_is_not_type(defbundle("foo", mat_4), "matrix") != 0
    stop
endif

if assert_is_not_type(defbundle("foo", str_1), "array") != 1
    stop
endif
if assert_is_not_type(defbundle("foo", str_2), "matrix") != 1
    stop
endif
if assert_is_not_type(defbundle("foo", str_3), "string") != 0
    stop
endif
if assert_is_not_type(defbundle("foo", str_4), "list") != 1
    stop
endif

if assert_is_not_type(defbundle("foo", b_1), "bundle") != 0
    stop
endif
if assert_is_not_type(defbundle("foo", b_2), "series") != 1
    stop
endif

if assert_is_not_type(defbundle("foo", ser_1), "scalar") != 1
    stop
endif
if assert_is_not_type(defbundle("foo", ser_2), "series") != 0
    stop
endif

if assert_is_not_type(defbundle("foo", L_1), "list") != 0
    stop
endif
if assert_is_not_type(defbundle("foo", L_2), "matrix") != 1
    stop
endif

if assert_is_not_type(defbundle("foo", mats_1), "array") != 0
    stop
endif
if assert_is_not_type(defbundle("foo", mats_2), "matrix") != 1
    stop
endif
if assert_is_not_type(defbundle("foo", strarr_1), "string") != 1
    stop
endif
if assert_is_not_type(defbundle("foo", strarr_2), "list") != 1
    stop
endif



print "Start with assert_true()"
if !assert_true(1)
    stop
endif
if assert_true(0)
    stop
endif
if ok(assert_true(NA))
    stop
endif
if !assert_true(2)
    stop
endif
if !assert_true(-1)
    stop
endif


print "Start with assert_false()"
if assert_false(1)
    stop
endif
if !assert_false(0)
    stop
endif
if ok(assert_false(NA))
    stop
endif
if assert_false(2)
    stop
endif
if assert_false(-1)
    stop
endif


print "Start with assert_equal_str()"
if assert_equal_str("ABC", "ABC") != 1
    stop
endif
if assert_equal_str(" ABC", "ABC") != 0
    stop
endif
if assert_equal_str(toupper("abc"), "ABC") != 1
    stop
endif
if assert_equal_str("", "") != 1
    stop
endif
if assert_equal_str("", "__/%(=O?") != 0
    stop
endif
if assert_equal_str("739838", "739838") != 1
    stop
endif


print "Start with assert_not_equal_str()"
if assert_not_equal_str("ABC", "ABC") != 0
    stop
endif
if assert_not_equal_str(" ABC", "ABC") != 1
    stop
endif
if assert_not_equal_str(toupper("abc"), "ABC") != 0
    stop
endif
if assert_not_equal_str("", "") != 0
    stop
endif
if assert_not_equal_str("", "__/%(=O?") != 1
    stop
endif
if assert_not_equal_str("739838", "739838") != 0
    stop
endif



print "Start with assert_equal_num()"
if !assert_equal_num(22, 22)
    stop
endif
if assert_equal_num(1.5, 1.49)
    stop
endif
if assert_equal_num(-34, 34)
    stop
endif
if ok(assert_equal_num(NA, 34))
    stop
endif
if ok(assert_equal_num(34, NA))
    stop
endif
if ok(assert_equal_num(NA, NA))
    stop
endif
if assert_equal_num(-1, -1.001)
    stop
endif
if ok(assert_equal_num(log(22), log(0)))
    stop
endif


print "Start with assert_not_equal_num()"
if assert_not_equal_num(22, 22)
    stop
endif
if !assert_not_equal_num(-34, 34)
    stop
endif
if ok(assert_not_equal_num(NA, 34))
    stop
endif
if ok(assert_not_equal_num(34, NA))
    stop
endif
if ok(assert_not_equal_num(NA, NA))
    stop
endif
if !assert_not_equal_num(-1, -1.001)
    stop
endif


print "Start with assert_greater_equal_num()"
if !assert_greater_equal_num(22, 22)
    stop
endif
if assert_greater_equal_num(-34, 34)
    stop
endif
if !assert_greater_equal_num(34, -34)
    stop
endif
if ok(assert_greater_equal_num(NA, 34))
    stop
endif
if ok(assert_greater_equal_num(34, NA))
    stop
endif
if ok(assert_greater_equal_num(NA, NA))
    stop
endif
if !assert_greater_equal_num(-1, -1.001)
    stop
endif
if ok(assert_greater_equal_num(log(22), log(0)))
    stop
endif


print "Start with assert_less_equal_num()"
if !assert_less_equal_num(22, 22)
    stop
endif
if !assert_less_equal_num(-34, 34)
    stop
endif
if assert_less_equal_num(34, -34)
    stop
endif
if ok(assert_less_equal_num(NA, 34))
    stop
endif
if ok(assert_less_equal_num(34, NA))
    stop
endif
if ok(assert_less_equal_num(NA, NA))
    stop
endif
if assert_less_equal_num(-1, -1.001)
    stop
endif
if ok(assert_less_equal_num(log(22), log(0)))
    stop
endif



print "Start with assert_almost_equal_num()"
if assert_almost_equal_num(0.5, 1)
    stop
endif
if assert_almost_equal_num(0.99, 1, 1e-2)
    stop
endif
if !assert_almost_equal_num(0.991, 1, 1e-2)
    stop
endif
if assert_almost_equal_num(-0.99, -1, 1e-2)
    stop
endif
if !assert_almost_equal_num(-0.991, -1, 1e-2)
    stop
endif
if assert_almost_equal_num(0.99, -1, 1e-2)
    stop
endif
if assert_almost_equal_num(0.991, -1, 1e-2)
    stop
endif
if ok(assert_almost_equal_num(0.5, NA))
    stop
endif
if ok(assert_almost_equal_num(NA, 1))
    stop
endif
if ok(assert_almost_equal_num(NA, NA))
    stop
endif


print "Start with assert_not_almost_equal_num()"
if !assert_not_almost_equal_num(0.5, 1)
    stop
endif
if !assert_not_almost_equal_num(0.99, 1, 1e-2)
    stop
endif
if assert_not_almost_equal_num(0.991, 1, 1e-2)
    stop
endif
if !assert_not_almost_equal_num(-0.99, -1, 1e-2)
    stop
endif
if assert_not_almost_equal_num(-0.991, -1, 1e-2)
    stop
endif
if !assert_not_almost_equal_num(0.99, -1, 1e-2)
    stop
endif
if !assert_not_almost_equal_num(0.991, -1, 1e-2)
    stop
endif
if ok(assert_not_almost_equal_num(0.5, NA))
    stop
endif
if ok(assert_not_almost_equal_num(NA, 1))
    stop
endif
if ok(assert_not_almost_equal_num(NA, NA))
    stop
endif


printf "\nInfo: All tests passed.\n"
