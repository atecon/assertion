Written by Artur Tarassow (please ask questions and report bugs on the gretl mailing list if possible).

Source code and test script(s) can be found here:
https://github.com/atecon/assertion

Collection of assert-functions for writing (unit-)test cases and to detect test failure. Assert is a method useful in determining Pass or Fail status of a test case.

Currently, the most commonly used methods are supported.



assert_equal_num(first, second):
--------------
Checks for numerical values that first == second (equal).

Arguments:	first 	(scalar)
		second	(scalar)

Return:
Returns 1 if true, otherwise 0 (false). If either first and/or are NA, return NA.
-----------------------------------------------------------------------

assert_not_equal_num(first, second):
--------------
Checks for numerical values that first != second (not equal).

Arguments:	first 	(scalar)
		second	(scalar)

Return:
Returns 1 if true, otherwise 0 (false). If either first and/or are NA, return NA.
-----------------------------------------------------------------------


assert_greater_equal_num(first, second):
--------------
Checks for numerical values that first >= second (greater-or-equal).

Arguments:	first 	(scalar)
		second	(scalar)

Return:
Returns 1 if true, otherwise 0 (false). If either first and/or are NA, return NA.
-----------------------------------------------------------------------

assert_less_equal_num(first, second):
--------------
Checks for numerical values that first <= second (less-or-equal).

Arguments:	first 	(scalar)
		second	(scalar)

Return:
Returns 1 if true, otherwise 0 (false). If either first and/or are NA, return NA.
-----------------------------------------------------------------------

assert_almost_equal_num(first, second, threshold):
--------------
Checks for numerical values that round(first - second) == 0.

Arguments:	first 	(scalar)
		second	(scalar)
		threshold (scalar), check up to specific decimal places; default: 1e-7

Return:
Returns 1 if true, otherwise 0 (false). If either first and/or are NA, return NA.
-----------------------------------------------------------------------

assert_not_almost_equal_num(first, second, threshold):
--------------
Checks for numerical values that round(first - second) != 0.

Arguments:	first 	(scalar)
		second	(scalar)
		threshold (scalar), check up to specific decimal places; default: 1e-7

Return:
Returns 1 if true, otherwise 0 (false). If either first and/or are NA, return NA.
-----------------------------------------------------------------------

assert_equal_str(first, second):
--------------
Checks for string-valued variables that first == second (equal).

Arguments:	first 	(string)
		second	(string)

Return:
Returns 1 if true, otherwise 0 (false).
-----------------------------------------------------------------------

assert_not_equal_str(first, second):
--------------
Checks for string-valued variables that first != second (not equal).

Arguments:	first 	(string)
		second	(string)

Return:
Returns 1 if true, otherwise 0 (false).
-----------------------------------------------------------------------

assert_true(x):
--------------
Checks that bool(x) is True (!=0 and !=NA).

Arguments:	x		(scalar)

Return:
Returns 1 if True, otherwise 0 (False). If x is NA, return NA.
-----------------------------------------------------------------------

assert_false(x):
--------------
Checks that bool(x) is False (!=0 and !=NA).

Arguments:	x		(scalar)

Return:
Returns 1 if False, otherwise 0 (True). If x is NA, return NA.
-----------------------------------------------------------------------

assert_is_type(B, type):
--------------
Checks that element in bundle B is of a specific type.

Arguments:	B		(bundle, only single element is allowed)
		type 	(string, either: "scalar, series, matrix, string,
			bundle, array, list.")

Return:
Returns 1 if true, otherwise 0 (false). If "type" is not of a supported data type, return NA.
-----------------------------------------------------------------------

assert_is_not_type(B, type):
--------------
Checks that element in bundle B is not of a specific type.

Arguments:	B		(bundle with single element)
		type 	(string, either: "scalar, series, matrix, string, bundle,
			array, list.")

Return:
Returns 1 if true, otherwise 0 (false). If "type" is not of a supported data type, return NA.
-----------------------------------------------------------------------


Changelog:
- v0.5, December 2019:
    + initial release

