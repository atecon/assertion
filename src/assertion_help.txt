Written by Artur Tarassow (please ask questions and report bugs on the gretl mailing list if possible).

Source code and test script(s) can be found here:
https://github.com/atecon/assertion

Collection of assert-functions for writing (unit-)test cases and to detect test failure. Assert is a method useful in determining Pass or Fail status of a test case.

Currently, the most commonly used methods are supported.

Most functions are inspired by the "unittest" package for Python:
https://docs.python.org/3/library/unittest.html


assert_equal_num(first, second):
--------------
Checks for numerical values that first == second (equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_not_equal_num(first, second):
--------------
Checks for numerical values that first != second (not equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------


assert_greater_equal_num(first, second):
--------------
Checks for numerical values that first >= second (greater-or-equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_less_equal_num(first, second):
--------------
Checks for numerical values that first <= second (less-or-equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_almost_equal_num(first, second, threshold):
--------------
Checks for numerical values that round(first - second) == 0.

Arguments:  first       (scalar)
            second      (scalar)
            threshold   (scalar), check up to specific decimal places;
                        default: 1e-7

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_not_almost_equal_num(first, second, threshold):
--------------
Checks for numerical values that round(first - second) != 0.

Arguments:   first       (scalar)
             second      (scalar)
             threshold   (scalar), check up to specific decimal places;
                         default: 1e-7

Return:
Function error if what is asserted is wrong or either first and/or second are NA
-----------------------------------------------------------------------

assert_equal_str(first, second):
--------------
Checks for string-valued variables that first == second.

Arguments:   first      (string)
             second     (string)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_not_equal_str(first, second):
--------------
Checks for string-valued variables that first != second.

Arguments:   first      (string)
             second     (string)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_true(x):
--------------
Checks that bool(x) is True (!=0 and !=NA).

Arguments:    x          (scalar)

Return:
Function error if what is asserted is wrong or either the argument is NA.
-----------------------------------------------------------------------

assert_false(x):
--------------
Checks that bool(x) is False (==0 and !=NA).

Arguments:    x          (scalar)

Return:
Function error case assertion is wrong or either the argument is NA.

Note: The standard way of asserting that P is false is to assert not-P. Try to avoid assert_false() by using assert_true() accordingly. The assert_false() function will deprecated with the next version after version 1.0.
-----------------------------------------------------------------------

assert_is_type(B, type):
--------------
Checks that element in bundle B is of a specific type.

Arguments:   B      (bundle, only single element is allowed)
             type   (string, either: "scalar, series, matrix, string,
                    bundle, array, list.")

Return:
Function error if what is asserted is wrong or either first and/or second
are NA.
-----------------------------------------------------------------------

assert_is_not_type(B, type):
--------------
Checks that element in bundle B is not of a specific type.

Arguments:   B       (bundle with single element)
             type    (string, either: "scalar, series, matrix, string,
                     bundle, array, list.")

Return:
Function error if what is asserted is wrong or either first and/or second
are NA.
-----------------------------------------------------------------------


Changelog:
- v1.0, August 2020:
    + Fix bug in assert_false(): should throw error in case 'x' IS NOT
      0 instead of IS 1.
    + Replace deprecated funcerr() function by funcerr command.
    + Improve help text.
    + Add note on preferring assert_true() instead of assert_false()
      whenever possible.
    + Put unit-tests into separate functions to avoid leakages.
- v0.5, January 2020:
    + initial release
