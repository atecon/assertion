function scalar one_element_in_bundle (const bundle B)
    /* Helper function for assertIs(Not)Type() */

    if nelem(B) != 1
        printf "\nError: Bundle 'B' has to include only a single element."
        return 0
    else
        return 1
    endif
end function


function scalar valid_type_id (const scalar type_id)
    /* Helper for assertIsType() */

    if type_id == 0
        printf "\nError: Requested data type not supported by gretl."
        return 0
    else
        return 1
    endif
end function


function scalar assert_type_get_key_and_return (const bundle B,
                                                string type "scalar, series, matrix, string, bundle, array, list.",
                                                const bool is_no_type)
    /* */

    strings types = get_gretl_dtypes()
    scalar type_id = strpos(types, type)

    if one_element_in_bundle(B) && valid_type_id(type_id)
        string key = getkeys(B)[1]
    else
        return NA
    endif

    # a 1x1 matrix is actually treated as a scalar and vice versa
    cast_onexone_matrix_to_scalar(B, key, type, types, &type_id)

    if typestr(typeof(B["@key"])) == types[type_id]
        if is_no_type
            return 0
        else
            return 1
        endif
    else
        if is_no_type
            return 1
        else
            return 0
        endif
    endif
end function


function scalar assertIsType (const bundle B,
                              string type "scalar, series, matrix, string, bundle, array, list.")
    /* Checks that element in bundle B is of a specific type.
    Returns 1 if true, otherwise 0. */

    return assert_type_get_key_and_return(B, type, 0)
end function


function scalar assertIsNotType (const bundle B,
                                 string type "scalar, series, matrix, string, bundle, array, list.")
    /* Checks that element in bundle B is not of a specific type.
    Returns 1 if true, otherwise 0. */

    return assert_type_get_key_and_return(B, type, 1)
end function


function void cast_onexone_matrix_to_scalar (const bundle B,
                                             const string key,
                                             const string type,
                                             const strings types,
                                             scalar *type_id)
    /* Helper function for assertIs/Not/Type()*/

    if type == "matrix"
        catch scalar nrows = rows(B["@key"])
        if !$error && (cols(B["@key"]) + rows(B["@key"])) == 2
            type_id = strpos(types, "scalar")
        endif
    endif
end function


function strings get_gretl_dtypes (void)
    return defarray("scalar", "series", "matrix", "string", "bundle", "array", "list")
end function


function scalar isbool (const scalar x)
    /* Helper function for assertTrue/False(). */

    if ok(x) && (x == 1 || x == 0)
        return 1
    elif !ok(x)
        printf "\nError: Input value is not boolean (0=false, 1=true).\n"
        return NA
    else
        return 0
    endif
end function


function scalar assertTrue (const scalar x)
/* Checks that bool(x) is True (=1).
    Returns 1 if True, otherwise 0. */

    if !isbool(x)
        return NA
    elif x == 1
        return 1
    else
        return 0
    endif
end function


function scalar assertFalse (const scalar x)
/* Checks that bool(x) is False (=0).
    Returns 1 if False indeed, otherwise 0. */

    if !isbool(x)
        return NA
    elif x == 1
        return 0
    else
        return 1
    endif
end function


function scalar assertEqualStr (const string first,
                                const string second)
    /* Checks for string values that a == b.
    Returns 1 if true, otherwise 0. */

    if first == second
        return 1
    else
        return 0
    endif
end function

function scalar assertNotEqualStr (const string first,
                                   const string second)
    /* Checks for string values that a != b.
    Returns 1 if true, otherwise 0. */

    if first == second
        return 0
    else
        return 1
    endif
end function


function scalar valid_first_and_second (const scalar first,
                                        const scalar second)
    /* Helper function for assert(Not)EqualNum(). */

    if ok(first) && ok(second)
        return 1
    else
        printf "\nError: At least one input value is NA.\n"
        return 0
    endif
end function


function scalar assertGreaterEqualNum (const scalar first,
                                       const scalar second)
    /* Checks for numerical values that a >= b.
       Returns 1 if true, otherwise 0. If either first and/or
    are NA, return NA. */

    if !valid_first_and_second(first, second)        
        return NA 
    endif

    if first >= second
        return 1
    else
        return 0
    endif
end function


function scalar assertLessEqualNum (const scalar first,
                                    const scalar second)
    /* Checks for numerical values that a <= b.
       Returns 1 if true, otherwise 0. If either first and/or
    are NA, return NA. */

    if !valid_first_and_second(first, second)
        return NA
    elif first <= second
        return 1
    else
        return 0
    endif
end function


function scalar assertEqualNum (const scalar first,
                                const scalar second)
    /* Checks for numerical values that a == b.
       Returns 1 if true, otherwise 0. If either first and/or
    are NA, return NA. */

    if !valid_first_and_second(first, second)
        return NA
    elif first == second
        return 1
    else
        return 0
    endif
end function


function scalar assertNotEqualNum (const scalar first,
                                   const scalar second)
    /* Checks for numerical values that a != b.
       Returns 1 if true, otherwise 0. If either first and/or
    are NA, return NA.*/

    if !valid_first_and_second(first, second)
        return NA
    elif first == second
        return 0
    else
        return 1
    endif
end function

function scalar assertAlmostEqualNum (const scalar first,
                                      const scalar second,
                                      const scalar threshold[0::1e-7] "decimal places to check")
    /* Checks for numerical values that round(a-b) == 0.
       Returns 1 if true, otherwise 0. If either first and/or
    second are NA, return NA. */

    matrix m = first - second

    if !valid_first_and_second(first, second)
        return NA
    elif zeroifclose(&m, threshold)
        return 1
    else
        return 0
    endif
end function


function scalar assertNotAlmostEqualNum (const scalar first,
                                         const scalar second,
                                         const scalar threshold[0::1e-7] "decimal places to check")
    /* Checks for numerical values that a != b.
       Returns 0 if true, otherwise 1. If either first and/or
    second are NA, return NA. */

    matrix m = first - second

    if !valid_first_and_second(first, second)
        return NA
    elif zeroifclose(&m, threshold)
        return 0
    else
        return 1
    endif
end function



