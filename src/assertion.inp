function scalar one_element_in_bundle (const bundle B)
    /* Helper function for assertIs(Not)Type() */

    if nelem(B) != 1
        printf "\nError: Bundle 'B' has to include only a single element."
        return 0
    else
        return 1
    endif
end function


function scalar valid_type_id (const scalar type_id)
    /* Helper for assertIsType() */

    if type_id == 0
        printf "\nError: Requested data type not supported by gretl."
        return 0
    else
        return 1
    endif
end function


function scalar assert_type_get_key_and_return (const bundle B,
                                                string type "scalar, series, matrix, string, bundle, array, list.",
                                                const bool is_no_type)
    /* */

    strings types = get_gretl_dtypes()
    scalar type_id = strpos(types, type)

    if one_element_in_bundle(B) && valid_type_id(type_id)
        string key = getkeys(B)[1]
    else
        return NA
    endif

    # a 1x1 matrix is actually treated as a scalar and vice versa
    cast_onexone_matrix_to_scalar(B, key, type, types, &type_id)

    if typestr(typeof(B["@key"])) == types[type_id]
        if is_no_type
            return 0
        else
            return 1
        endif
    else
        if is_no_type
            return 1
        else
            return 0
        endif
    endif
end function


function void assert_is_type (const bundle B,
                              string type "scalar, series, matrix, string, bundle, array, list.")
    /* Checks that element in bundle B is of a specific type.
    Returns 1 if true, otherwise 0. */

    scalar ret = assert_type_get_key_and_return(B, type, 0)

    if ret == 0
        string func_name = "assert_is_type"

        if nelem(B) > 0
            fail_msg_assert(sprintf("%s(Bundle[%s])", func_name, getkeys(B)[1]), \
              sprintf("%s is instance %s", getkeys(B)[1], type))
        endif

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_is_not_type (const bundle B,
                                  string type "scalar, series, matrix, string, bundle, array, list.")
    /* Checks that element in bundle B is not of a specific type.
    Returns 1 if true, otherwise 0. */

    scalar ret = assert_type_get_key_and_return(B, type, 1)

    if ret == 0
        string func_name = "assert_is_not_type"

        if nelem(B) > 0
            fail_msg_assert(sprintf("%s(Bundle[%s])", func_name, getkeys(B)[1]), \
              sprintf("%s is not instance %s", getkeys(B)[1], type))
        endif

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void cast_onexone_matrix_to_scalar (const bundle B,
                                             const string key,
                                             const string type,
                                             const strings types,
                                             scalar *type_id)
    /* Helper function for assert_is_/not/_type()*/

    if type == "matrix"
        catch scalar nrows = rows(B["@key"])
        if !$error && (cols(B["@key"]) + rows(B["@key"])) == 2
            type_id = strpos(types, "scalar")
        endif
    endif
end function


function strings get_gretl_dtypes (void)
    return defarray("scalar", "series", "matrix", "string", "bundle", "array", "list")
end function


function void assert_true (const scalar x)
    /* Checks that bool(x) is True (=1). */

    if !ok(x) || x == 0
        string func_name = "assert_true"

        fail_msg_assert(sprintf("%s(%g)", func_name, x), \
          sprintf("bool(%g) is True", x))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_false (const scalar x)
    /* Checks that bool(x) is False (=0). */

    if !ok(x) || x != 0
        string func_name = "assert_false"

        fail_msg_assert(sprintf("%s(%g)", func_name, x), \
          sprintf("bool(%g) is False", x))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_equal_str (const string first,
                                const string second)
    /* Checks for string values that a == b. */

    if first != second
        string func_name = "assert_equal_str"

        fail_msg_assert(sprintf("%s(%s, %s)", func_name, first, second), \
          sprintf("%s == %s", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_not_equal_str (const string first,
                                    const string second)
    /* Checks for string values that a != b. */

    if first == second
        string func_name = "assert_not_equal_str"

        fail_msg_assert(sprintf("%s(%s, %s)", func_name, first, second), \
          sprintf("%s != %s", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function scalar valid_first_and_second (const scalar first,
                                        const scalar second)
    /* Helper function for assert_(not_)equal_num(). */

    if ok(first) && ok(second)
        return 1
    else
        printf "\nError: At least one input value is NA.\n"
        return 0
    endif
end function


function void assert_greater_equal_num (const scalar first,
                                        const scalar second)
    /* Checks for numerical values that a >= b. */

    if !valid_first_and_second(first, second) || !(first >= second)
        string func_name = "assert_greater_equal_num"

        fail_msg_assert(sprintf("%s(%g, %g)", func_name, first, second), \
          sprintf("%g >= %g", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_less_equal_num (const scalar first,
                                     const scalar second)
    /* Checks for numerical values that a <= b. */

    if !valid_first_and_second(first, second) || !(first <= second)
        string func_name = "assert_less_equal_num"

        fail_msg_assert(sprintf("%s(%g, %g)", func_name, first, second), \
          sprintf("%g <= %g", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_equal_num (const scalar first,
                                const scalar second)
    /* Checks for numerical values that a == b. */

    if !valid_first_and_second(first, second) || (first != second)
        string func_name = "assert_equal_num"

        fail_msg_assert(sprintf("%s(%g, %g)", func_name, first, second), \
          sprintf("%g == %g", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_not_equal_num (const scalar first,
                                    const scalar second)
    /* Checks for numerical values that a != b. */

    if !valid_first_and_second(first, second) || (first == second)
        string func_name = "assert_not_equal_num"

        fail_msg_assert(sprintf("%s(%g, %g)", func_name, first, second), \
          sprintf("%g != %g", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function

function void assert_almost_equal_num (const scalar first,
                                       const scalar second,
                                       const scalar threshold[0::1e-7] "decimal places to check")
    /* Checks for numerical values that round(a-b) == 0. */

    matrix m = first - second

    if !valid_first_and_second(first, second) || !zeroifclose(&m, threshold)
        string func_name = "assert_almost_equal_num"

        fail_msg_assert(sprintf("%s(%g, %g, %g)", func_name, first, second, threshold), \
          sprintf("round(%g - %g) == 0", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void assert_not_almost_equal_num (const scalar first,
                                           const scalar second,
                                           const scalar threshold[0::1e-7] "decimal places to check")
    /* Checks for numerical values that round(a-b) != 0. */

    matrix m = first - second

    if !valid_first_and_second(first, second) || zeroifclose(&m, threshold)
        string func_name = "assert_not_almost_equal_num"

        fail_msg_assert(sprintf("%s(%g, %g, %g)", func_name, first, second, threshold), \
          sprintf("round(%g - %g) != 0", first, second))

        funcerr sprintf("%s failed.", func_name)
    endif
end function


function void fail_msg_assert (const string assert_func,
                               const string assert_stmt)
    /* Print-out in case assert fails. */

    printf "\n============ FAILURE ================================\n"
    printf "\nFunction asserted:\n\
      %s\n", assert_func		# e.g. <assert_equal_num(first, second)
    printf "\nStatement asserted:\n\
      %s\n", assert_stmt		# e.g. <first == second>
    printf "=====================================================\n"
end function
