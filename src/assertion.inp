/*
def test_upper(self):
self.assertEqual('foo'.upper(), 'FOO')

def test_isupper(self):
self.assertTrue('FOO'.isupper())
self.assertFalse('Foo'.isupper())
*/

function scalar assertTrue (const scalar x)
    /* Checks that bool(x) is True (=1).
    Returns 1 if True, otherwise 0. */

    if !ok(x) || x < 0 || x > 1
        return NA
    endif

    if x == 1
        return 1
    else
        return 0
    endif
end function


function scalar assertFalse (const scalar x)
    /* Checks that bool(x) is False (=0).
    Returns 1 if flase indeed, otherwise 0. */

    if !ok(x) || x < 0 || x > 1
        return NA
    endif

    if x == 1
        return 0
    else
        return 1
    endif
end function


function scalar assertEqualStr (const string first,
                                const string second)
    /* Checks for string values that a == b.
    Returns 1 if true, otherwise 0. */

    if ( strlen(first) && !strlen(second) ) || \
        ( !strlen(first) && strlen(second) )
        return 0
    elif !strlen(first) && !strlen(second)
        return 1
    endif

    if first == second
        return 1
    else
        return 0
    endif
end function

function scalar assertNotEqualStr (const string first,
                                   const string second)
    /* Checks for string values that a != b.
    Returns 1 if true, otherwise 0. */

    if ( strlen(first) && !strlen(second) ) || \
        ( !strlen(first) && strlen(second) )
        return 1
    elif !strlen(first) && !strlen(second)
        return 0
    endif

    if first == second
        return 0
    else
        return 1
    endif
end function



function scalar assertEqualNum (const scalar first,
                                const scalar second)
    /* Checks for numerical values that a == b.
    Returns 1 if true, otherwise 0. */

    if ( ok(first) && !ok(second) ) || \
        ( !ok(first) && ok(second) )
        return 0
    elif !ok(first) && !ok(second)
        return 1
    endif

    if first == second
        return 1
    else
        return 0
    endif
end function


function scalar assertNotEqualNum (const scalar first,
                                   const scalar second)
    /* Checks for numerical values that a != b.
    Returns 1 if true, otherwise 0. */

    if ( ok(first) && !ok(second) ) || \
        ( !ok(first) && ok(second) )
        return 1
    elif !ok(first) && !ok(second)
        return 0
    endif

    if first == second
        return 0
    else
        return 1
    endif
end function



