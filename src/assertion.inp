
include string_utils.gfn --force		# FIXME: consider dependency!


# FIXME: A lot of code redundancy with assertIsType()
function scalar assertIsNotType (const bundle B,
                                 string type "scalar, series, matrix, string, bundle, array, list.")
    /* Checks that element in bundle B is not of a specified type.
    Returns 1 if true, otherwise 0. */

    strings types = get_gretl_dtypes()
    scalar type_id = strpos(types, type)

    if nelem(B) != 1
        printf "\nError: Bundle 'B' must include a single element to check."
        return NA
    else
        key = getkeys(B)[1]
    endif
    
    if type_id == 0
        printf "\nError: Requested data type not supported by gretl."
        return NA
    endif

    # a 1x1 matrix is actually treated as a scalar and vice versa
    if type == "matrix" 
        catch scalar nrows = rows(B["@key"])
        if !$error
            if (cols(B["@key"]) + rows(B["@key"])) == 2
                type = "scalar"
                type_id = strpos(types, type)
            endif
        endif
    endif

    if typestr(typeof(B["@key"])) == types[type_id]
        return 0
    else
        return 1
    endif
end function


function strings get_gretl_dtypes (void)
    return defarray("scalar", "series", "matrix", "string", "bundle", "array", "list")
end function


function scalar assertIsType (const bundle B,
                              string type "scalar, series, matrix, string, bundle, array, list.")
    /* Checks that element in bundle B is of a specified type.
    Returns 1 if true, otherwise 0. */

    strings types = get_gretl_dtypes()
    scalar type_id = strpos(types, type)

    if nelem(B) != 1
        printf "\nError: Bundle 'B' must include a single element to check."
        return NA
    else
        key = getkeys(B)[1]
    endif
    
    if type_id == 0
        printf "\nError: Requested data type not supported by gretl."
        return NA
    endif

    # a 1x1 matrix is actually treated as a scalar and vice versa
    if type == "matrix" 
        catch scalar nrows = rows(B["@key"])
        if !$error
            if (cols(B["@key"]) + rows(B["@key"])) == 2
                type = "scalar"
                type_id = strpos(types, type)
            endif
        endif
    endif

    if typestr(typeof(B["@key"])) == types[type_id]
        return 1
    else
        return 0
    endif
end function



function scalar assertTrue (const scalar x)
/* Checks that bool(x) is True (=1).
    Returns 1 if True, otherwise 0. */

    if !ok(x) || x < 0 || x > 1
        return NA
    endif

    if x == 1
        return 1
    else
        return 0
    endif
end function


function scalar assertFalse (const scalar x)
/* Checks that bool(x) is False (=0).
    Returns 1 if flase indeed, otherwise 0. */

    if !ok(x) || x < 0 || x > 1
        return NA
    endif

    if x == 1
        return 0
    else
        return 1
    endif
end function


function scalar assertEqualStr (const string first,
                                const string second)
    /* Checks for string values that a == b.
    Returns 1 if true, otherwise 0. */

    if ( strlen(first) && !strlen(second) ) || \
          ( !strlen(first) && strlen(second) )
        return 0
    elif !strlen(first) && !strlen(second)
        return 1
    endif

    if first == second
        return 1
    else
        return 0
    endif
end function

function scalar assertNotEqualStr (const string first,
                                   const string second)
    /* Checks for string values that a != b.
    Returns 1 if true, otherwise 0. */

    if ( strlen(first) && !strlen(second) ) || \
          ( !strlen(first) && strlen(second) )
        return 1
    elif !strlen(first) && !strlen(second)
        return 0
    endif

    if first == second
        return 0
    else
        return 1
    endif
end function



function scalar assertEqualNum (const scalar first,
                                const scalar second)
    /* Checks for numerical values that a == b.
    Returns 1 if true, otherwise 0. */

    if ( ok(first) && !ok(second) ) || \
          ( !ok(first) && ok(second) )
        return 0
    elif !ok(first) && !ok(second)
        return 1
    endif

    if first == second
        return 1
    else
        return 0
    endif
end function


function scalar assertNotEqualNum (const scalar first,
                                   const scalar second)
    /* Checks for numerical values that a != b.
    Returns 1 if true, otherwise 0. */

    if ( ok(first) && !ok(second) ) || \
          ( !ok(first) && ok(second) )
        return 1
    elif !ok(first) && !ok(second)
        return 0
    endif

    if first == second
        return 0
    else
        return 1
    endif
end function



