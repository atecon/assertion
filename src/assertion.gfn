<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="assertion" no-data-ok="true" minver="2018a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>1.0</version>
<date>2020-08-22</date>
<description>Assert functions for verifying expectations and values in gretl tests</description>
<tags>C81</tags>
<help>
Written by Artur Tarassow (please ask questions and report bugs on the gretl mailing list if possible).

Source code and test script(s) can be found here:
https://github.com/atecon/assertion

Collection of assert-functions for writing (unit-)test cases and to detect test failure. Assert is a method useful in determining Pass or Fail status of a test case.

Currently, the most commonly used methods are supported.

Most functions are inspired by the &quot;unittest&quot; package for Python:
https://docs.python.org/3/library/unittest.html


assert_equal_num(first, second):
--------------
Checks for numerical values that first == second (equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_not_equal_num(first, second):
--------------
Checks for numerical values that first != second (not equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------


assert_greater_equal_num(first, second):
--------------
Checks for numerical values that first &gt;= second (greater-or-equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_less_equal_num(first, second):
--------------
Checks for numerical values that first &lt;= second (less-or-equal).

Arguments:       first  (scalar)
                 second (scalar)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_almost_equal_num(first, second, threshold):
--------------
Checks for numerical values that round(first - second) == 0.

Arguments:  first       (scalar)
            second      (scalar)
            threshold   (scalar), check up to specific decimal places;
                        default: 1e-7

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_not_almost_equal_num(first, second, threshold):
--------------
Checks for numerical values that round(first - second) != 0.

Arguments:   first       (scalar)
             second      (scalar)
             threshold   (scalar), check up to specific decimal places;
                         default: 1e-7

Return:
Function error if what is asserted is wrong or either first and/or second are NA
-----------------------------------------------------------------------

assert_equal_str(first, second):
--------------
Checks for string-valued variables that first == second.

Arguments:   first      (string)
             second     (string)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_not_equal_str(first, second):
--------------
Checks for string-valued variables that first != second.

Arguments:   first      (string)
             second     (string)

Return:
Function error if what is asserted is wrong or either first and/or second are NA.
-----------------------------------------------------------------------

assert_true(x):
--------------
Checks that bool(x) is True (!=0 and !=NA).

Arguments:    x          (scalar)

Return:
Function error if what is asserted is wrong or either the argument is NA.
-----------------------------------------------------------------------

assert_false(x):
--------------
Checks that bool(x) is False (==0 and !=NA).

Arguments:    x          (scalar)

Return:
Function error case assertion is wrong or either the argument is NA.

Note: The standard way of asserting that P is false is to assert not-P. Try to avoid assert_false() by using assert_true() accordingly. The assert_false() function will deprecated with the next version after version 1.0.
-----------------------------------------------------------------------

assert_is_type(B, type):
--------------
Checks that element in bundle B is of a specific type.

Arguments:   B      (bundle, only single element is allowed)
             type   (string, either: &quot;scalar, series, matrix, string,
                    bundle, array, list.&quot;)

Return:
Function error if what is asserted is wrong or either first and/or second
are NA.
-----------------------------------------------------------------------

assert_is_not_type(B, type):
--------------
Checks that element in bundle B is not of a specific type.

Arguments:   B       (bundle with single element)
             type    (string, either: &quot;scalar, series, matrix, string,
                     bundle, array, list.&quot;)

Return:
Function error if what is asserted is wrong or either first and/or second
are NA.
-----------------------------------------------------------------------


Changelog:
- v1.0, August 2020:
    + Fix bug in assert_false(): should throw error in case 'x' IS NOT
      0 instead of IS 1.
    + Improve help text.
    + Add note on preferring assert_true() instead of assert_false()
      whenever possible.
    + Put unit-tests into separate functions to avoid leakages.
- v0.5, January 2020:
    + initial release
</help>
<depends count="2">
string_utils extra </depends>
<gretl-function name="assert_is_type" type="void">
 <params count="2">
  <param name="B" type="bundle" const="true"/>
  <param name="type" type="string">
<description>scalar, series, matrix, string, bundle, array, list.</description>
  </param>
 </params>
<code>/* Checks that element in bundle B is of a specific type.
Returns 1 if true, otherwise 0. */
scalar ret = assert_type_get_key_and_return(B, type, 0)
if ret == 0
  string func_name = &quot;assert_is_type&quot;
  if nelem(B) &gt; 0
    fail_msg_assert(sprintf(&quot;%s(Bundle[%s])&quot;, func_name, getkeys(B)[1]), sprintf(&quot;%s is instance %s&quot;, getkeys(B)[1], type))
  endif
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_is_not_type" type="void">
 <params count="2">
  <param name="B" type="bundle" const="true"/>
  <param name="type" type="string">
<description>scalar, series, matrix, string, bundle, array, list.</description>
  </param>
 </params>
<code>/* Checks that element in bundle B is not of a specific type.
Returns 1 if true, otherwise 0. */
scalar ret = assert_type_get_key_and_return(B, type, 1)
if ret == 0
  string func_name = &quot;assert_is_not_type&quot;
  if nelem(B) &gt; 0
    fail_msg_assert(sprintf(&quot;%s(Bundle[%s])&quot;, func_name, getkeys(B)[1]), sprintf(&quot;%s is not instance %s&quot;, getkeys(B)[1], type))
  endif
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_true" type="void">
 <params count="1">
  <param name="x" type="scalar" const="true"/>
 </params>
<code>/* Checks that bool(x) is True (=1). */
if !ok(x) || x == 0
  string func_name = &quot;assert_true&quot;
  fail_msg_assert(sprintf(&quot;%s(%g)&quot;, func_name, x), sprintf(&quot;bool(%g) is True&quot;, x))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_false" type="void">
 <params count="1">
  <param name="x" type="scalar" const="true"/>
 </params>
<code>/* Checks that bool(x) is False (=0). */
if !ok(x) || x != 0
  string func_name = &quot;assert_false&quot;
  fail_msg_assert(sprintf(&quot;%s(%g)&quot;, func_name, x), sprintf(&quot;bool(%g) is False&quot;, x))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_equal_str" type="void">
 <params count="2">
  <param name="first" type="string" const="true"/>
  <param name="second" type="string" const="true"/>
 </params>
<code>/* Checks for string values that a == b. */
if first != second
  string func_name = &quot;assert_equal_str&quot;
  fail_msg_assert(sprintf(&quot;%s(%s, %s)&quot;, func_name, first, second), sprintf(&quot;%s == %s&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_not_equal_str" type="void">
 <params count="2">
  <param name="first" type="string" const="true"/>
  <param name="second" type="string" const="true"/>
 </params>
<code>/* Checks for string values that a != b. */
if first == second
  string func_name = &quot;assert_not_equal_str&quot;
  fail_msg_assert(sprintf(&quot;%s(%s, %s)&quot;, func_name, first, second), sprintf(&quot;%s != %s&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_equal_num" type="void">
 <params count="2">
  <param name="first" type="scalar" const="true"/>
  <param name="second" type="scalar" const="true"/>
 </params>
<code>/* Checks for numerical values that a == b. */
if !valid_first_and_second(first, second) || (first != second)
  string func_name = &quot;assert_equal_num&quot;
  fail_msg_assert(sprintf(&quot;%s(%g, %g)&quot;, func_name, first, second), sprintf(&quot;%g == %g&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_not_equal_num" type="void">
 <params count="2">
  <param name="first" type="scalar" const="true"/>
  <param name="second" type="scalar" const="true"/>
 </params>
<code>/* Checks for numerical values that a != b. */
if !valid_first_and_second(first, second) || (first == second)
  string func_name = &quot;assert_not_equal_num&quot;
  fail_msg_assert(sprintf(&quot;%s(%g, %g)&quot;, func_name, first, second), sprintf(&quot;%g != %g&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_greater_equal_num" type="void">
 <params count="2">
  <param name="first" type="scalar" const="true"/>
  <param name="second" type="scalar" const="true"/>
 </params>
<code>/* Checks for numerical values that a &gt;= b. */
if !valid_first_and_second(first, second) || !(first &gt;= second)
  string func_name = &quot;assert_greater_equal_num&quot;
  fail_msg_assert(sprintf(&quot;%s(%g, %g)&quot;, func_name, first, second), sprintf(&quot;%g &gt;= %g&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_less_equal_num" type="void">
 <params count="2">
  <param name="first" type="scalar" const="true"/>
  <param name="second" type="scalar" const="true"/>
 </params>
<code>/* Checks for numerical values that a &lt;= b. */
if !valid_first_and_second(first, second) || !(first &lt;= second)
  string func_name = &quot;assert_less_equal_num&quot;
  fail_msg_assert(sprintf(&quot;%s(%g, %g)&quot;, func_name, first, second), sprintf(&quot;%g &lt;= %g&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_almost_equal_num" type="void">
 <params count="3">
  <param name="first" type="scalar" const="true"/>
  <param name="second" type="scalar" const="true"/>
  <param name="threshold" type="scalar" min="0" default="1e-07" const="true">
<description>decimal places to check</description>
  </param>
 </params>
<code>/* Checks for numerical values that round(a-b) == 0. */
matrix m = first - second
if !valid_first_and_second(first, second) || !zeroifclose(&amp;m, threshold)
  string func_name = &quot;assert_almost_equal_num&quot;
  fail_msg_assert(sprintf(&quot;%s(%g, %g, %g)&quot;, func_name, first, second, threshold), sprintf(&quot;round(%g - %g) == 0&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="assert_not_almost_equal_num" type="void">
 <params count="3">
  <param name="first" type="scalar" const="true"/>
  <param name="second" type="scalar" const="true"/>
  <param name="threshold" type="scalar" min="0" default="1e-07" const="true">
<description>decimal places to check</description>
  </param>
 </params>
<code>/* Checks for numerical values that round(a-b) != 0. */
matrix m = first - second
if !valid_first_and_second(first, second) || zeroifclose(&amp;m, threshold)
  string func_name = &quot;assert_not_almost_equal_num&quot;
  fail_msg_assert(sprintf(&quot;%s(%g, %g, %g)&quot;, func_name, first, second, threshold), sprintf(&quot;round(%g - %g) != 0&quot;, first, second))
  funcerr sprintf(&quot;%s failed.&quot;, func_name)
endif
</code>
</gretl-function>
<gretl-function name="one_element_in_bundle" type="scalar" private="1">
 <params count="1">
  <param name="B" type="bundle" const="true"/>
 </params>
<code>/* Helper function for assertIs(Not)Type() */
if nelem(B) != 1
  printf &quot;\nError: Bundle 'B' has to include only a single element.&quot;
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="valid_type_id" type="scalar" private="1">
 <params count="1">
  <param name="type_id" type="scalar" const="true"/>
 </params>
<code>/* Helper for assertIsType() */
if type_id == 0
  printf &quot;\nError: Requested data type not supported by gretl.&quot;
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="assert_type_get_key_and_return" type="scalar" private="1">
 <params count="3">
  <param name="B" type="bundle" const="true"/>
  <param name="type" type="string">
<description>scalar, series, matrix, string, bundle, array, list.</description>
  </param>
  <param name="is_no_type" type="bool" const="true"/>
 </params>
<code>/* */
strings types = get_gretl_dtypes()
scalar type_id = strpos(types, type)
if one_element_in_bundle(B) &amp;&amp; valid_type_id(type_id)
  string key = getkeys(B)[1]
else
  return NA
endif
# a 1x1 matrix is actually treated as a scalar and vice versa
cast_onexone_matrix_to_scalar(B, key, type, types, &amp;type_id)
if typestr(typeof(B[&quot;@key&quot;])) == types[type_id]
  if is_no_type
    return 0
  else
    return 1
  endif
else
  if is_no_type
    return 1
  else
    return 0
  endif
endif
</code>
</gretl-function>
<gretl-function name="cast_onexone_matrix_to_scalar" type="void" private="1">
 <params count="5">
  <param name="B" type="bundle" const="true"/>
  <param name="key" type="string" const="true"/>
  <param name="type" type="string" const="true"/>
  <param name="types" type="strings" const="true"/>
  <param name="type_id" type="scalarref"/>
 </params>
<code>/* Helper function for assert_is_/not/_type()*/
if type == &quot;matrix&quot;
  catch scalar nrows = rows(B[&quot;@key&quot;])
  if !$error &amp;&amp; (cols(B[&quot;@key&quot;]) + rows(B[&quot;@key&quot;])) == 2
    type_id = strpos(types, &quot;scalar&quot;)
  endif
endif
</code>
</gretl-function>
<gretl-function name="get_gretl_dtypes" type="strings" private="1">
<code>return defarray(&quot;scalar&quot;, &quot;series&quot;, &quot;matrix&quot;, &quot;string&quot;, &quot;bundle&quot;, &quot;array&quot;, &quot;list&quot;)
</code>
</gretl-function>
<gretl-function name="valid_first_and_second" type="scalar" private="1">
 <params count="2">
  <param name="first" type="scalar" const="true"/>
  <param name="second" type="scalar" const="true"/>
 </params>
<code>/* Helper function for assert_(not_)equal_num(). */
if ok(first) &amp;&amp; ok(second)
  return 1
else
  printf &quot;\nError: At least one input value is NA.\n&quot;
  return 0
endif
</code>
</gretl-function>
<gretl-function name="fail_msg_assert" type="void" private="1">
 <params count="2">
  <param name="assert_func" type="string" const="true"/>
  <param name="assert_stmt" type="string" const="true"/>
 </params>
<code>/* Print-out in case assert fails. */
printf &quot;\n============ FAILURE ================================\n&quot;
printf &quot;\nFunction asserted:\n       %s\n&quot;, assert_func  # e.g. &lt;assert_equal_num(first, second)
printf &quot;\nStatement asserted:\n       %s\n&quot;, assert_stmt  # e.g. &lt;first == second&gt;
printf &quot;=====================================================\n&quot;
</code>
</gretl-function>
<sample-script>
set verbose off
set warnings off
clear

include assertion.gfn

scalar run_failing_cases = 0		# SELECT: 1=run failing cases, 0=don't

# Initialize some variables
scalar scalar_1 = 0
scalar scalar_2 = -2.7
scalar scalar_3 = 3.5
scalar scalar_4 = 3.59
string str_1 = &quot;ABC&quot;
string str_2 = &quot;ABC&quot;
string str_3 = &quot;_ABC &quot;

# non-failing cases
## numeric values
assert_true(scalar_1==0)
assert_true(scalar_2)
assert_not_equal_num(scalar_1, scalar_2)
assert_greater_equal_num(scalar_1, scalar_2)
assert_less_equal_num(scalar_2, scalar_3)
assert_almost_equal_num(scalar_3, scalar_4, 1e-1)

## string values
assert_equal_str(str_1, str_2)
assert_not_equal_str(str_1, str_3)


# failing cases	 -- activate if you want to see failures
# 'catch' leads to non-stopping behavior
if run_failing_cases
    ## numeric values
    catch assert_true(scalar_1)
    catch assert_equal_num(scalar_1, scalar_2)
    catch assert_greater_equal_num(scalar_2, scalar_3)
    catch assert_almost_equal_num(scalar_3, scalar_4, 1e-2)

    # string values
    catch assert_equal_str(str_1, str_3)
endif


print &quot;Finished 8 asserts.&quot;
</sample-script>
</gretl-function-package>
</gretl-functions>
